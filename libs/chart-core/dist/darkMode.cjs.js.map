{"version":3,"file":"darkMode.cjs.js","sources":["../lib/darkMode.mjs"],"sourcesContent":["import chroma from 'chroma-js';\nimport invertColor from '@datawrapper/shared/invertColor.js';\nimport get from 'lodash/get.js';\nimport set from 'lodash/set.js';\nimport deepmerge from 'deepmerge';\n\n/**\n * merges all overrides for which the provided filter function returns true\n *\n * @param {object} theme\n * @param {(override:object) => boolean|null} filterFunc\n * @returns\n */\nexport function mergeOverrides(theme, filterFunc) {\n    const merged = {};\n    get(theme.data, 'overrides', []).forEach(({ type, settings, condition }) => {\n        if (!filterFunc || filterFunc({ type, settings, condition })) {\n            Object.entries(settings).forEach(([key, value]) => {\n                set(merged, key, value);\n            });\n        }\n    });\n    return merged;\n}\n\n/**\n * converts all colors in a theme that are white-listed for auto dark-mode\n * conversion.\n *\n * @param {object} themeSchema - the JSON build of the themeData schemas\n * @param {object} opts\n * @param {object} opts.theme - the theme to invert\n * @param {string} opts.origBg - the original \"light\" background\n * @param {string} opts.darkBg - the dark background\n * @return {object} the inverted theme\n */\nexport async function convertToDarkMode(themeSchema, { theme, origBg, darkBg }) {\n    // get \"global\" dark mode override settings, defined in un-conditional overrides\n    const darkMode = mergeOverrides(theme, d => d.type === 'darkMode' && !d.condition);\n    const themeColorKeys = await findDarkModeOverrideKeys(themeSchema, theme);\n\n    themeColorKeys.forEach(({ path: key, noInvert, isHexColorAndOpacity }) => {\n        const darkThemeVal = get(darkMode, key);\n        // there are 3 different ways we will invert theme values\n        if (isHexColorAndOpacity) {\n            // special treatment for colors with opacity, e.g. `{ color: '#ff0000', opacity: 0.5 }`\n            setThemeValue(oldVal => invertHexColorAndOpacity(oldVal));\n        } else if (darkThemeVal) {\n            // theme defines an un-conditional darkmode override for this key\n            // which we will use instead of auto-inverted colors,...\n            const globalVal = get(theme.data, key);\n            setThemeValue(lightVal =>\n                // ...except if the \"light\" value defined in an override is different\n                // from the global light value of that key, in which case we auto-invert\n                // unless `noInvert` is set, in which case we do nothing\n                globalVal === lightVal\n                    ? darkThemeVal\n                    : noInvert\n                    ? null\n                    : convertColorOrArray(lightVal)\n            );\n        } else {\n            // not a { color, opacity } pair and no global darkMode override defined\n            // so we can just use the normal inver\n            setThemeValue(oldVal => {\n                if (oldVal && !noInvert) {\n                    return convertColorOrArray(oldVal);\n                } else if (key === 'colors.chartContentBaseColor') {\n                    return '#eeeeee';\n                }\n            });\n        }\n\n        /**\n         * convert a color or an array of colors to dark mode\n         * @param {string|string[]} color - the input color or an array of colors\n         * @returns {string|string[]}\n         */\n        function convertColorOrArray(color) {\n            return Array.isArray(color)\n                ? color.map(convertColor)\n                : typeof color === 'string' && color.includes(' ')\n                ? color\n                      .split(' ')\n                      .map(part => (chroma.valid(part) ? convertColor(part) : part))\n                      .join(' ')\n                : convertColor(color);\n        }\n\n        /**\n         * convert a light mode color to dark mode (inverting)\n         * @param {string} lightColor\n         * @returns\n         */\n        function convertColor(lightColor) {\n            if (!chroma.valid(lightColor)) return lightColor;\n            const lightContrast = chroma.contrast(origBg, lightColor);\n            return invertColor(\n                lightColor,\n                darkBg,\n                origBg,\n                0.85 -\n                    // boost text contrast if old text contrast was low already\n                    (lightContrast < 8 && (key.includes('typography') || key.includes('text'))\n                        ? 0.2\n                        : 0)\n            );\n        }\n\n        /**\n         * converts a color given as {color,opacity} pair to dark mode\n         *\n         * @param {object} colorAndOpacity\n         * @param {string} colorAndOpacity.color\n         * @param {number} colorAndOpacity.opacity\n         * @returns {object} a {color?, opacity?} pair\n         */\n        function invertHexColorAndOpacity(colorAndOpacity = {}) {\n            const { color, opacity } = colorAndOpacity;\n            let darkModeVal = get(darkMode, key);\n            if (!darkModeVal && color && typeof opacity !== 'undefined') {\n                // we don't have an explicit global darkMode override, and the opacity is defined\n                const alphaColor = chroma(color).alpha(opacity).hex();\n                const inverted = chroma(invertColor(alphaColor, darkBg, origBg, 0.85));\n                // split color and opacity after inverting\n                darkModeVal = {\n                    color: inverted.alpha(1).hex(),\n                    opacity: inverted.alpha()\n                };\n            } else {\n                // check if the darkMode override has either opacity or color set\n                // and use whatever we have. This allows themes to use the auto-inverted\n                // color, but set an explicit opacity to be used in dark mode\n                if (!darkModeVal) darkModeVal = {};\n                if (!('opacity' in darkModeVal) && typeof opacity !== 'undefined') {\n                    darkModeVal.opacity = opacity;\n                } else if (!darkModeVal.color && color) {\n                    darkModeVal.color = invertColor(color, darkBg, origBg, 0.85);\n                }\n            }\n            return darkModeVal;\n        }\n\n        /**\n         * Instead of simply setting the inverted value, we need to also check\n         * if an non-darkMode (aka light mode) override for the same key exists.\n         * In that case, we need to invert the value defined in the override settings\n         * as well.\n         *\n         * @param {(color:string) => string} invertValue - a function to invert the given value\n         */\n        function setThemeValue(invertValue) {\n            // first set normal value\n            const newVal = invertValue(get(theme.data, key));\n            if (newVal) set(theme.data, key, newVal);\n            // then look through non-darkMode overrides and also update value\n            (theme.data.overrides || [])\n                .filter(od => od.condition && od.type !== 'darkMode')\n                .forEach(({ settings }) => {\n                    if (settings[key] !== undefined) {\n                        const newVal = invertValue(settings[key]);\n                        if (newVal) settings[key] = newVal;\n                    }\n                });\n        }\n    });\n\n    set(theme, 'data.colors.background', darkBg);\n    const bodyBackground = get(theme, 'data.style.body.background', 'transparent');\n    if (bodyBackground !== 'transparent' && chroma(bodyBackground).hex() === chroma(origBg).hex()) {\n        set(theme, 'data.style.body.background', darkBg);\n    }\n}\n/**\n * returns the original background color as well as its lumincance\n * along with the inverted or user-defined background color for the theme\n *\n * @param {object} theme\n * @returns {{ darkBg: string, origBg: string, origBgLum: number }}\n */\nexport function getBackgroundColors(theme) {\n    const origBg = get(\n        theme.data,\n        'colors.background',\n        get(theme.data, 'style.body.background', '#ffffff')\n    );\n    const origBgLum = chroma(origBg).luminance();\n    const darkMode = mergeOverrides(theme, d => d.type === 'darkMode' && !d.condition);\n    const darkBg =\n        origBgLum < 0.3\n            ? origBg\n            : get(\n                  darkMode,\n                  'colors.background',\n                  chroma(origBg)\n                      .luminance(origBgLum > 0.5 ? 1 - origBgLum : origBgLum * 0.5)\n                      .hex()\n              );\n    return { darkBg, origBg, origBgLum };\n}\n\n/**\n * Extracts all color keys from a theme that support dark mode overrides.\n * If the color doesn't overrideExclude it will also be automatically\n * inverted by convertToDarkMode()\n *\n * @param {object} themeSchema the JSON build of the themeData schema\n * @param {object} theme the theme\n * @returns {{ path:string, noInvert:boolean, isHexColorAndOpacity:boolean }[]}\n */\nexport async function findDarkModeOverrideKeys(themeSchema, theme = {}) {\n    const keepUnits = new Set(['hexColor', 'cssColor', 'cssBorder', 'hexColorAndOpacity']);\n    const out = [];\n    const refs = [];\n\n    walk(themeSchema, '');\n\n    function walk(obj, path) {\n        if (obj?.shared) refs.unshift(...obj.shared);\n        if (obj?.type === 'link') {\n            const id = obj.link.ref.path[0];\n            const ref = refs.find(({ flags }) => flags.id === id);\n            if (obj.whens) {\n                const concattedSchemas = obj.whens.map(({ concat }) => concat).filter(Boolean);\n                obj = ref;\n                concattedSchemas.forEach(concattedSchema => {\n                    obj = deepmerge(obj, concattedSchema);\n                });\n            } else {\n                obj = ref;\n            }\n        }\n        const isHexColorAndOpacity = obj?.flags?.unit === 'hexColorAndOpacity';\n\n        if (obj?.type === 'object' && !isHexColorAndOpacity) {\n            for (const key of Object.keys(obj.keys || {})) {\n                walk(obj.keys[key], `${path}${path === '' ? '' : '.'}${key}`);\n            }\n            const allowedKeys = obj?.patterns?.[0]?.schema?.allow;\n            if (allowedKeys) {\n                allowedKeys.forEach(key => {\n                    walk(obj.patterns[0].rule, `${path}${path === '' ? '' : '.'}${key}`);\n                });\n            }\n        } else {\n            const unit = obj?.flags?.unit;\n            const metas = obj?.metas || [];\n\n            const overrideInclude = metas.find(d => (d.overrideSupport || []).includes('darkMode'));\n            const overrideExclude = metas.find(d => (d.overrideExclude || []).includes('darkMode'));\n\n            if ((keepUnits.has(unit) || overrideInclude) && !overrideExclude) {\n                const noInvert = !!metas.find(d => d.noDarkModeInvert);\n                const props = { path, noInvert, isHexColorAndOpacity };\n                if (path.includes('[i]')) {\n                    getArrayKeys(props);\n                } else {\n                    out.push(props);\n                }\n            }\n\n            if (obj?.type === 'array') {\n                walk(obj?.items?.[0], `${path}[i]`);\n            }\n        }\n    }\n\n    function getArrayKeys(props) {\n        const match = props.path.match(/\\[i\\]/);\n        if (match) {\n            for (const i in get(theme.data, props.path.slice(0, match.index), [])) {\n                getArrayKeys({ ...props, path: props.path.replace(/(\\[i\\])/, `.${i}`) });\n            }\n        } else {\n            out.push(props);\n        }\n    }\n    return [...out];\n}\n"],"names":["get","set","chroma","invertColor","deepmerge"],"mappings":"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"}